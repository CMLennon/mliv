lm(x1_hat_ml ~ poly(z,1, raw=T) , data = i_dt) %>% tidy(quick = T)
# OLS: ML SUMMARY
lm(x1_hat_ml ~ z1 + z2 , data = i_dt) %>% tidy(quick = T)
# OLS: ML SUMMARY
lm(x1_hat_ml ~ z + z2 , data = i_dt) %>% tidy(quick = T)
lm(x1_hat_ml ~ poly(z,2, raw=T) , data = i_dt) %>% tidy(quick = T)
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T)
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term))
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary")
# OLS: ML SUMMARY
lm(x1_hat_ols ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary") %>% t()
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary") %>% select(,2)
# OLS: ML SUMMARY
select(lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary"),2)
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary"),
2) %>% t()
# OLS: ML SUMMARY
t(select(
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary"),
2))
View(i_dt)
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP")
# OLS: ML SUMMARY
t(select(
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "ML: 1st summary"),
2))
# OLS: ML SUMMARY
t(select(
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)),
2))
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)),
2)) %>%
mutate(model = "ML: 1st summary")
# Function: One iteration ----------------------------------------------------------------
one_iter <- function(iter, n) {
# Set parameters
β0 <- 1
β1 <- 1
β2 <- 1
# Generate the instrument z
i_dt <- data.table(
z = runif(n = n, min = -1, max = 1),
e_common = rnorm(n, 0, 1)
)
# z affects x1 (plus correlated noise)
i_dt[, x1 := 1 + z + e_common]
# z^2 and affects x2 (plus correlated noise)
i_dt[, x2 := 1 + 10 * z^2 + e_common]
# Calculate y
i_dt[, y := β0 + β1 * x1 + β2 * x2 + runif(n, min = -1, max = 1)]
#    i_dt[, y := β0 + β1 * x1 + β2 * x2 + rnorm(n, 0, 1)]
# OLS first stage
i_dt[, x1_hat_ols := predict(lm(x1 ~ z, data = i_dt))]
# Machine learn the first stage
i_dt[, x1_hat_ml := predict(ctree(x1 ~ z, data = i_dt))]
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: OVB
lm(y ~ x1, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: OVB"),
# Second stage: OLS
lm(y ~ x1_hat_ols, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: OLS"),
# Second stage: ML
lm(y ~ x1_hat_ml, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: ML"),
# OLS: ML SUMMARY
t(select(
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)),
2))
) %>% mutate(iter = iter) %>% data.table()
}
# Function: Run iterations ---------------------------------------------------------------
run_sim <- function(n, n_sims, n_cores = 4, seed = 12345) {
# Set the seed
set.seed(seed)
# Run a parallelized simulation
mclapply(X = 1:n_sims, FUN = one_iter, n = n, mc.cores = n_cores) %>% rbindlist()
}
# Run simulation -------------------------------------------------------------------------
sim_dt <- run_sim(n = 1e4, n_sims = 1e2)
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term))
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
)
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP")
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
)
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
)
# Function: One iteration ----------------------------------------------------------------
one_iter <- function(iter, n) {
# Set parameters
β0 <- 1
β1 <- 1
β2 <- 1
# Generate the instrument z
i_dt <- data.table(
z = runif(n = n, min = -1, max = 1),
e_common = rnorm(n, 0, 1)
)
# z affects x1 (plus correlated noise)
i_dt[, x1 := 1 + z + e_common]
# z^2 and affects x2 (plus correlated noise)
i_dt[, x2 := 1 + 10 * z^2 + e_common]
# Calculate y
i_dt[, y := β0 + β1 * x1 + β2 * x2 + runif(n, min = -1, max = 1)]
#    i_dt[, y := β0 + β1 * x1 + β2 * x2 + rnorm(n, 0, 1)]
# OLS first stage
i_dt[, x1_hat_ols := predict(lm(x1 ~ z, data = i_dt))]
# Machine learn the first stage
i_dt[, x1_hat_ml := predict(ctree(x1 ~ z, data = i_dt))]
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: OVB
lm(y ~ x1, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: OVB"),
# Second stage: OLS
lm(y ~ x1_hat_ols, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: OLS"),
# Second stage: ML
lm(y ~ x1_hat_ml, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: ML"),
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
) %>% mutate(iter = iter) %>% data.table()
}
# Function: Run iterations ---------------------------------------------------------------
run_sim <- function(n, n_sims, n_cores = 4, seed = 12345) {
# Set the seed
set.seed(seed)
# Run a parallelized simulation
mclapply(X = 1:n_sims, FUN = one_iter, n = n, mc.cores = n_cores) %>% rbindlist()
}
# Run simulation -------------------------------------------------------------------------
sim_dt <- run_sim(n = 1e4, n_sims = 1e2)
View(sim_dt)
df <- merge(
sim_dt %>% filter(grepl("Second", model)) %>% filter(grepl("ML", model)),
sim_dt %>% filter(grepl("Second", model)) %>% filter(grepl("OLS", model)),
by="iter")
df$MLgeOLS <- ifelse(df$estimate.x>df$estimate.y,1,0)
df$MLlessOLS <- df$estimate.x-df$estimate.y
setDT(df)
df[, mean(MLgeOLS, na.rm = T)]
ggplot(
data = sim_dt %>% filter(grepl("Second", model)),
aes(x = estimate, fill = model)
) +
geom_density(color = NA, alpha = 0.65) +
geom_vline(xintercept = 1) +
theme_pander() +
theme(plot.caption = element_text(face = "italic", size=6)) +
scale_fill_viridis_d("Model", begin = 0.1, end = 0.85, option = "B") +
labs(
caption=paste("Fraction in which ML produces the larger estimate: ",
df[, mean(MLgeOLS, na.rm = T)],
sep=""),
size=1
)
sim_dt[, mean(estimate, na.rm = T), by = model]
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(grepl(-"Summary", model))
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(-grepl("Summary", model))
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(-(grepl("Summary", model))
sim_dt[, mean(estimate, na.rm = T), by = model]
sim_dt[, mean(estimate, na.rm = T), by = model]
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(grepl("Summary", model)
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(grepl("Summary", model))
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(grepl("SUMMARY", model))
sim_dt[, mean(estimate, na.rm = T), by = model] %>% filter(!grepl("SUMMARY", model))
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
#        filter(grepl("z", term)) %>%
mutate(model = "1st SUMMARY")
)
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
mutate(model = "1st SUMMARY")
)
line_df <- tibble(
intercept = sim_df %>% filter(term == "1st SUMMARY") %>% filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_df %>% filter(term == "1st SUMMARY") %>% filter(term == ")1") %>% select(estimate) %>% unlist(),
slope2 = sim_df %>% filter(term == "1st SUMMARY") %>% filter(term == ")2") %>% select(estimate) %>% unlist(),
slope3 = sim_df %>% filter(term == "1st SUMMARY") %>% filter(term == ")3") %>% select(estimate) %>% unlist()
)
line_df <- tibble(
intercept = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term == ")1") %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term == ")2") %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term == ")3") %>% select(estimate) %>% unlist()
)
View(line_df)
intercept = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term != "z") %>% select(estimate) %>% unlist()
# Function: One iteration ----------------------------------------------------------------
one_iter <- function(iter, n) {
# Set parameters
β0 <- 1
β1 <- 1
β2 <- 1
# Generate the instrument z
i_dt <- data.table(
z = runif(n = n, min = -1, max = 1),
e_common = rnorm(n, 0, 1)
)
# z affects x1 (plus correlated noise)
i_dt[, x1 := 1 + z + e_common]
# z^2 and affects x2 (plus correlated noise)
i_dt[, x2 := 1 + 10 * z^2 + e_common]
# Calculate y
i_dt[, y := β0 + β1 * x1 + β2 * x2 + runif(n, min = -1, max = 1)]
#    i_dt[, y := β0 + β1 * x1 + β2 * x2 + rnorm(n, 0, 1)]
# OLS first stage
i_dt[, x1_hat_ols := predict(lm(x1 ~ z, data = i_dt))]
# Machine learn the first stage
i_dt[, x1_hat_ml := predict(ctree(x1 ~ z, data = i_dt))]
bind_rows(
# OLS: DGP
lm(y ~ x1 + x2, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: DGP"),
# OLS: OVB
lm(y ~ x1, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "OLS: OVB"),
# Second stage: OLS
lm(y ~ x1_hat_ols, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: OLS"),
# Second stage: ML
lm(y ~ x1_hat_ml, data = i_dt) %>% tidy(quick = T) %>%
filter(grepl("x1", term)) %>%
mutate(model = "Second stage: ML"),
# OLS: ML SUMMARY
lm(x1_hat_ml ~ poly(z,3, raw=T) , data = i_dt) %>% tidy(quick = T) %>%
mutate(model = "1st SUMMARY")
) %>% mutate(iter = iter) %>% data.table()
}
# Function: Run iterations ---------------------------------------------------------------
run_sim <- function(n, n_sims, n_cores = 4, seed = 12345) {
# Set the seed
set.seed(seed)
# Run a parallelized simulation
mclapply(X = 1:n_sims, FUN = one_iter, n = n, mc.cores = n_cores) %>% rbindlist()
}
# Run simulation -------------------------------------------------------------------------
sim_dt <- run_sim(n = 1e4, n_sims = 1e2)
df <- merge(
sim_dt %>% filter(grepl("Second", model)) %>% filter(grepl("ML", model)),
sim_dt %>% filter(grepl("Second", model)) %>% filter(grepl("OLS", model)),
by="iter")
df$MLgeOLS <- ifelse(df$estimate.x>df$estimate.y,1,0)
df$MLlessOLS <- df$estimate.x-df$estimate.y
setDT(df)
df[, mean(MLgeOLS, na.rm = T)]
ggplot(
data = sim_dt %>% filter(grepl("Second", model)),
aes(x = estimate, fill = model)
) +
geom_density(color = NA, alpha = 0.65) +
geom_vline(xintercept = 1) +
theme_pander() +
theme(plot.caption = element_text(face = "italic", size=6)) +
scale_fill_viridis_d("Model", begin = 0.1, end = 0.85, option = "B") +
labs(
caption=paste("Fraction in which ML produces the larger estimate: ",
df[, mean(MLgeOLS, na.rm = T)],
sep=""),
size=1
)
intercept = sim_dt %>% filter(term == "1st SUMMARY") %>% filter(term != "z") %>% select(estimate) %>% unlist()
intercept = sim_dt %>% filter(term == "1st SUMMARY")
View(sim_dt)
intercept = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(term != "z") %>%
select(estimate) %>% unlist()
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")1") %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")2") %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")3") %>% select(estimate) %>%
unlist())
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(term == ")1") %>%
select(estimate) %>% unlist(),
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")1") %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")2") %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term == ")3") %>% select(estimate) %>%
unlist())
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(term == ")1") %>%
select(estimate) %>% unlist()
slope1 = sim_dt %>%
filter(model == "1st SUMMARY")
View(slope1)
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>%
select(estimate) %>% unlist()
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>%
unlist())
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>%
select(estimate) %>% unlist()
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>%
select(estimate) %>% unlist()
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>%
select(estimate) %>% unlist()
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>%
select(estimate) %>% unlist()
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(term != "z") %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
intercept = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(term != "z") %>%
select(estimate) %>% unlist()
line_df <- tibble(
line_df <- tibble(
line_df <- tibble(
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl("(Intercept)", term)) %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
View(line_df)
intercept = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(term != "z") %>%
select(estimate) %>% unlist()
slope1 = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>%
select(estimate) %>% unlist()
intercept = sim_dt %>%
filter(model == "1st SUMMARY") %>%
filter(grepl("(Intercept)", term)) %>%
select(estimate) %>% unlist()
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl("(Intercept)", term)) %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
View(line_df)
View(sim_dt)
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl("(Inter", term)) %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl("(Intercept)", term)) %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
line_df <- tibble(
intercept = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl("Intercept", term)) %>% select(estimate) %>% unlist(),
slope1 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")1", term)) %>% select(estimate) %>% unlist(),
slope2 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")2", term)) %>% select(estimate) %>% unlist(),
slope3 = sim_dt %>% filter(model == "1st SUMMARY") %>%
filter(grepl(")3", term)) %>% select(estimate) %>% unlist()
)
